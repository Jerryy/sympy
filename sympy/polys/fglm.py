"""Convert Groebner bases of zero-dimensional ideals from one monomial order to another. """

from sympy.polys.polytools import options, parallel_poly_from_expr
from sympy.utilities import flatten

def is_zero_dimensional(G, *gens, **args):
    """
    Checks if the ideal generated by G is zero-dimensional (or,
    equivalently, if the number of solutions of the system G is
    finite).
    In order to always obtain a correct result, G has to be a
    Groebner basis. However, if G is not a Groebner basis and `True`
    is returned, the ideal is zero-dimensional.

    For an ideal to be zero-dimensional, for every variable some
    power has to be the leading monomial of an element of G.

    >>> from sympy import symbols
    >>> from sympy.polys.fglm import is_zero_dimensional
    >>> from sympy.polys import groebner
    >>> x, y, z = symbols('x, y, z')
    >>> F = [x**3 + x + 1, y**2 + 1, z - (x**2 + y)]
    >>> is_zero_dimensional(F, z, x, y, order='lex')  # lucky choice!
    True
    >>> is_zero_dimensional(F, x, y, z, order='lex')
    False
    >>> G = groebner(F, x, y, z, order='grlex')
    >>> is_zero_dimensional(G, x, y, z, order='grlex')
    True

    **References**
    Ideals, Varieties and Algorithms, David A. Cox, John B. Little, Donal O'Shea, 3rd edition, p. 234
    """
    options.allowed_flags(args, ['polys'])

    try:
        polys, opt = parallel_poly_from_expr(G, *gens, **args)
    except PolificationError, exc:
        raise ComputationFailed('is_zero_dimensional', len(G), exc)

    u = len(flatten(gens)) - 1

    def single_var(m):
        """Returns `True` if only a single entry of the tuple m is not `0`. """
        n = 0
        for v in m:
            if v != 0:
                n += 1
        return n == 1

    # select leading monomials that are powers of a single variable
    leading_monomials = [g.LM(opt.order) for g in polys if single_var(g.LM(opt.order)) == True]

    exponents = [0] * (u + 1)

    for m in leading_monomials:
        exponents = map(lambda (e, f): e + f, zip(exponents, m))

    product = 1
    for e in exponents:
        product *= e

    return product != 0  #, product
